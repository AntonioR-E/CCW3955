<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <client_script><![CDATA[function($scope, spUtil) {
  var c = this;
	
	spUtil.recordWatch($scope, c.options.table, c.options.filter, function() {
		c.data.stats = null;
		c.server.update();
		$scope.$broadcast("trend-chart.refresh");
	});
}]]></client_script>
        <controller_as>c</controller_as>
        <css>
.dsr-root {
  display: flex;
  height: 170px;
  max-height: 170px;
}

canvas {
  width: 100%;
}

// This is where highcharts should sit. 
.chart {
  flex: 0 0 270px;
  flex-direction: column;
  width: 270px;
  
  div {
    height: 100%;
    width: 100%;
    
    canvas {
      height: 100% !important;
      width: auto !important;
    }
  }
}

.count {
    position: absolute;
    transform: translateX(-50%);
    top: 45%;
    left: 50%;
    font-size: 48px;
    font-weight: 700;
}</css>
        <data_table>sp_instance_table</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list>table,filter,title</field_list>
        <has_preview>false</has_preview>
        <id>dashboard-summary-row</id>
        <internal>false</internal>
        <link><![CDATA[function(scope, element, attrs, ctrl) {
	var $timeout = $injector.get("$timeout");
	var dial = element.find('.dial').get(0);
	var gauge = null;
	
	var opts = {
		lines: 12,
		angle: -0.1,
		lineWidth: 0.1,
		limitMax: "false",
		percentColors: [
			[0.0, "#C3E88D"],
			[0.25, "#89DDFF"],
			[0.50, "#FFCB6B"],
			[0.75, "#f07178"],
			[0.95, "#FF5370"]
		],
		strokeColor: "#161824",
		generateGradient: true,
		pointer: {
			length: 0.6,
			strokeWidth: 0,
			color: "#000000"
		}
	};

	gauge = new Gauge(dial).setOptions(opts);
	gauge.setTextField(dial.nextElementSibling);
	gauge.maxValue = 100;
	gauge.animationSpeed = 15;
	
	gauge.set(scope.c.data.percentageHigh);
	
	scope.$watch(function() {
		return scope.c.data.percentageHigh;
	}, function() {
		if(!scope.c.data.percentageHigh) { return; }
		gauge.set(scope.c.data.percentageHigh);
	});
	
	$timeout(function() {
		var targets = {};
		var elements = {};
		var groups = ctrl.data.groups;
		var groupCount = ctrl.data.groups.length;
		
		var setup = {
			targets: targets,
			innerHTML: 1234,
			round: 1,
			easing: "easeOutExpo",
			duration: 3000,
			update: function(anim) {
        for(var i=0;i<=groupCount-1; i++){
					var key = "num-"+i
					elements[key].innerHTML = targets[key];
				}
			}
		};
		
		for(var i=0;i<=groupCount-1; i++) {
			var key = "num-" + i;
			targets[key] = 120;
			setup[key] = groups[i].value;
			elements[key] = element.find("h2." + key).get(0);
		}
		
		
		anime(setup);
	}, 100);
}]]></link>
        <name>dashboard-summary-row</name>
        <option_schema>[{"name":"aggregation_function","default_value":"COUNT","label":"Aggregation Function","type":"choice","choices":[{"label":"COUNT","value":"COUNT"},{"label":"SUM","value":"SUM"},{"label":"AVG","value":"AVG"},{"label":"MIN","value":"MIN"},{"label":"MAX","value":"MAX"}]},{"name":"trend_field","label":"Trend Field","type":"string"},{"name":"trend_field_ref","label":"Trend Field Ref","type":"string"},{"name":"trend","label":"Trend","type":"string"},{"name":"series_color","label":"Series Color","type":"string"},{"name":"group_field","label":"Group Field","type":"string"}]</option_schema>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
	data.chartWidget = $sp.getWidget('trend-chart', {
		"table": options.table,
		"display_field": options.display_field,
		"filter": options.filter,
		"aggregation_function": options.aggregation_function,
		"trend_field": options.trend_field,
		"trend_field_ref": options.trend_field_ref,
		"trend": options.trend,
		"series_color": options.series_color,
		"color_theme": "dark",
		"chart_type": "line-area",
		"null_value": "0",
		"hide_legend": true,
		"hide_horizontal_lines": true,
		"hide_axes": true
	});
	
	var colors = ['red', 'blue', 'yellow', 'green'];
	
	function getPercentageHigh() {
		var ga = new GlideAggregate(options.table);
		ga.addQuery(options.filter);
		ga.groupBy('priority');
		ga.addAggregate('COUNT');
		ga.query();
		
		var high = 0;
		var low = 0
		
		while(ga.next()) {
			var priority = ga.getDisplayValue('priority');
			
			if(priority !== '1 - Critical' && priority !== '2 - High') {
				low = ga.getAggregate('COUNT');
			} else {
				high = ga.getAggregate('COUNT');
			}
		}
		
		var percentage = Math.ceil((high * 100) / (high + low));
		return percentage > 100 ? 100 : percentage;
	}
	
	function getGroups() {
		var ga = new GlideAggregate(options.table);
		ga.addQuery(options.filter);
		ga.groupBy(options.group_field);
		ga.addAggregate('COUNT');
		ga.query();
		
		var index = 0;
		var groups = [];
		
		while(ga.next()) {
			var label = ga.getDisplayValue(options.group_field) || '(' + gs.getMessage('empty') + ')';
			
			groups.push({
				label: label,
				value: ga.getAggregate('COUNT'),
				color: colors[index++]
			});
			
			if(index === colors.length) index = 0;
		}
		
		return groups;
	}
	
	function getAssignmentStats() {
		var ga = new GlideAggregate(options.table);
		ga.addQuery(options.filter);
		ga.groupBy('assigned_to');
		ga.addAggregate('COUNT');
		ga.query();
		
		var unassigned = 0;
		var total = 0;
		var users = 0;
		
		while(ga.next()) {
			if(!ga.getDisplayValue('assigned_to')) { 
				unassigned++;
				continue;
			}
			
			total += parseInt(ga.getAggregate('COUNT'), 10);
			users++;
		}
		
		return {
			unassigned: unassigned,
			avgAssigned: total / users
		};
	}
	
	function getStateStats() {
		var opened = 0;
		var open_total = 0;
		
		var closed = 0;
		var close_total = 0;
		
		var ot = new GlideAggregate(options.table);
	
		ot.addQuery(options.filter);
		ot.addTrend('opened_at', 'Month');
		ot.addAggregate('COUNT');
		ot.query();
		
		while(ot.next()) {
			opened += parseInt(ot.getAggregate('COUNT'), 10);
			open_total++;
		}
		
		var ct = new GlideAggregate(options.table);
	
		ct.addQuery(options.filter);
		ct.addTrend('closed_at', 'Month');
		ct.addAggregate('COUNT');
		ct.query();
		
		while(ct.next()) {
			closed += parseInt(ct.getAggregate('COUNT'), 10);
			close_total++;
		}
		
		return {
			avgClosed: closed / close_total,
			avgNew: opened / open_total
		};
	}
	
	data.percentageHigh = getPercentageHigh();
	data.groups = getGroups();
	
	var assignmentStats = getAssignmentStats();
	var stateStats = getStateStats();
	
	data.stats = {
		unassigned: assignmentStats.unassigned,
		avgAssigned: assignmentStats.avgAssigned,
		avgClosed: stateStats.avgClosed,
		avgNew: stateStats.avgNew
	}
})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2017-04-26 21:45:21</sys_created_on>
        <sys_id>2e86d5bea91232007f4450c7f46790d7</sys_id>
        <sys_mod_count>193</sys_mod_count>
        <sys_name>dashboard-summary-row</sys_name>
        <sys_package display_value="Dashboard" source="x_snc_dashboard">678d017aa91232007f4450c7f467902e</sys_package>
        <sys_policy/>
        <sys_scope display_value="Dashboard">678d017aa91232007f4450c7f467902e</sys_scope>
        <sys_update_name>sp_widget_2e86d5bea91232007f4450c7f46790d7</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2017-05-09 15:36:16</sys_updated_on>
        <template><![CDATA[<div class="dsr-root">
  <div class="chart flex">
    <h3 ng-bind="c.options.title"></h3>
    <sp-widget widget="c.data.chartWidget"></sp-widget>
  </div> <!-- chart -->

  <div class="gauge col-lg-6 flex">
    <div class="col-md-6 flex align-center">
      <div class="relative">
        <canvas class="dial" style="width: 100%;" height="150" width="300"></canvas>
        <div class="count"></div>
      </div>
    </div>
    <div class="flex col-lg-6 list-data">
      <ul class="col-lg-12">
        <li>
          <div>
            <div class="col-md-4"><strong>{{c.data.stats.unassigned}}</strong></div> <div class="col-md-8">Unassigned</div>
          </div>
        </li>
        <li>
          <div>
            <div class="col-md-4"><strong>{{c.data.stats.avgClosed | number:2}}</strong></div> <div class="col-md-8">Avg. closed / month</div>
          </div>
        </li>
        <li>
          <div>
            <div class="col-md-4"><strong>{{c.data.stats.avgNew | number:2}}</strong></div> <div class="col-md-8">Avg. new / month</div>
          </div>
        </li>
        <li>
          <div>
            <div class="col-md-4"><strong>{{c.data.stats.avgAssigned | number:2}}</strong></div> <div class="col-md-8">Avg. assigned / person</div>
          </div>
        </li>
      </ul>
    </div>
  </div> <!-- gauge-wrapper -->

  <div class="metric col-md-6 flex">
    <div class="col-md-12" ng-repeat="g in c.data.groups">
      <h2 class="numbah num-{{$index}}" ng-class="g.color">{{g.value}}</h2>
      <p>{{g.label}}</p>
    </div>
  </div> <!-- metric -->

</div> <!-- stat -->]]></template>
    </sp_widget>
</record_update>
